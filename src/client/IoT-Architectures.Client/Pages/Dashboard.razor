@page "/"
@using IoT_Architectures.Client.Core.Rest.Endpoints
@using IoT_Architectures.Client.Domain.Models
@layout DashboardLayout
@inject IJSRuntime JS
@inject TemperateRecordsRestClient TRC

<PageHeader Text="Dashboard" />

<div class="row">
    <DashboardCard Title="Temperature World Map" BootstrapSizing="col-xl-9 col-lg-8">
        <div class="w-100 d-flex max-height-card">
            <div id="googleMap" class="h-100" style="flex-basis: 100%"></div>
        </div>
    </DashboardCard>

    <DashboardCard Title="Google Maps marker" BootstrapSizing="col-xl-3 col-lg-4">
        <div>
            <p class="m-0">
                <i class="fa-solid fa-temperature-half"></i> @Math.Round(Temperature, 2) Â°C
            </p>
            <p class="m-0">
                <i class="fa-solid fa-location-crosshairs"></i> lat: @Latitude
            </p>
            <p class="m-0">
                <i class="fa-solid fa-location-crosshairs"></i> lon: @Longitude
            </p>
        </div>
    </DashboardCard>
</div>

@functions {
    private DotNetObjectReference<Dashboard>? _dotnetHelper;
    private IEnumerable<GroupedTemperatureRecord> _markers = Enumerable.Empty<GroupedTemperatureRecord>();

    public double Latitude {get; set;}
    
    public double Longitude {get; set;}

    public double Temperature {get; set;}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) 
        {
            _dotnetHelper = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initalizeMap", "googleMap");
            _markers = await TRC.GetGroupedTemperatureRecordsAsync(DateTimeOffset.UtcNow.AddHours(-2.5), 5);

            foreach(var marker in _markers)
            {
                await AddMarker(marker.Latitude, marker.Longitude);
            }
        }
    }

    private async Task AddMarker(double latitude, double longitude) 
    {
        await JS.InvokeVoidAsync("createMarker", $"{latitude}-{longitude}", latitude, longitude, _dotnetHelper, nameof(ShowMarkerInfo));
    }

    [JSInvokable]
    public void ShowMarkerInfo(double lat, double lon)
    {
        Latitude = lat;
        Longitude = lon;
        Temperature = _markers.Single(x => x.Latitude == lat && x.Longitude == lon).AverageTemperature;
        StateHasChanged();
    }
}