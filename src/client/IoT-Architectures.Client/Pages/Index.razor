@page "/"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

<h1>Google Map Markers</h1>

<GoogleMap @ref="@_map1" Id="map1" Options="@_mapOptions"></GoogleMap>
<button @onclick="AddMarker">Add marker</button>
<button @onclick="RemoveMarker">Remove marker</button>
<button @onclick="Recenter">Re-center marker</button>
@if (_markers.Any())
{
    <br/>
    <text>Label: </text>
    <input type="text" value="@_labelText" @onchange="UpdateLabelText"/>
    <br/>
}

@functions {
    private GoogleMap _map1 = default!;
    private MapOptions _mapOptions = default!;
    private readonly Stack<Marker> _markers = new();
    private string _labelText = "";

    protected override void OnInitialized()
    {
        _mapOptions = new MapOptions
        {
            Zoom = 8,
            Center = new LatLngLiteral
            {
                Lat = 52.19189664972104,
                Lng = 5.696305211056612
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task AddMarker()
    {
        var marker = await Marker.CreateAsync(_map1.JsRuntime, _markers.Count % 2 == 0 ?
            new MarkerOptions
            {
                Position = await _map1.InteropObject.GetCenter(),
                Map = _map1.InteropObject,
                Label = new MarkerLabel { Text = $"Test {_markers.Count}", FontWeight = "bold" },
                Draggable = true,
                Icon = new Icon
                {
                    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                }
            } :
            new MarkerOptions
            {
                Position = await _map1.InteropObject.GetCenter(),
                Map = _map1.InteropObject,
                Label = $"Test {_markers.Count}",
                Draggable = true,
                Icon = new Icon
                {
                    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                }
            });

        var icon = await marker.GetIcon();

        Console.WriteLine($"Get icon result type is : {icon.Value.GetType()}");

        icon.Switch(
            Console.WriteLine,
            i => Console.WriteLine(i.Url),
            _ => { });

        _markers.Push(marker);
        _labelText = await marker.GetLabelText();

        await marker.AddListener<MouseEvent>("click", Handler);
        return;

        async void Handler(MouseEvent e)
        {
            var markerLabelText = await marker.GetLabelText();
            Console.WriteLine($"Marker clicked: {markerLabelText}");
        }
    }

    private async Task RemoveMarker()
    {
        if (!_markers.Any())
        {
            return;
        }

        var lastMarker = _markers.Pop();
        await lastMarker.SetMap(null);
        _labelText = _markers.Any() ? await _markers.Peek().GetLabelText() : "";
    }

    private async Task Recenter()
    {
        if (!_markers.Any())
        {
            return;
        }

        var lastMarker = _markers.Peek();
        var center = await _map1.InteropObject.GetCenter();
        await lastMarker.SetPosition(center);
    }

    private async Task UpdateLabelText(ChangeEventArgs e)
    {
        if (!_markers.Any())
        {
            return;
        }

        var newLabelText = e.Value?.ToString() ?? "";
        if (_labelText != newLabelText)
        {
            _labelText = newLabelText;

            var lastMarker = _markers.Peek();
            await lastMarker.SetLabelText(_labelText);
        }
    }

}