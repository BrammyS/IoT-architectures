@page "/"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

<h1>Google Map Markers</h1>

<GoogleMap @ref="@map1" Id="map1" Options="@mapOptions"></GoogleMap>
<button @onclick="AddMarker">Add marker</button>
<button @onclick="RemoveMarker">Remove marker</button>
<button @onclick="Recenter">Re-center marker</button>

@functions {
    private GoogleMap map1;

    private MapOptions mapOptions;

    private Stack<Marker> markers = new();

    private List<string> _events = new();

    protected override void OnInitialized()
    {
        mapOptions = new MapOptions
        {
            Zoom = 13,
            Center = new LatLngLiteral
            {
                Lat = 13.505892,
                Lng = 100.8162
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task AddMarker()
    {
        var marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions
        {
            Position = await map1.InteropObject.GetCenter(),
            Map = map1.InteropObject,
            Label = $"Test {markers.Count}",
            Icon = new Icon
            {
                Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            }
        });
        
        var icon = await marker.GetIcon();

        Console.WriteLine($"Get icon result type is : {icon.Value.GetType()}");

        icon.Switch(
            s => Console.WriteLine(s),
            i => Console.WriteLine(i.Url),
            _ => { });

        markers.Push(marker);

        void Handler(MouseEvent e)
        {
            Console.WriteLine("test");
        }

        await marker.AddListener<MouseEvent>("click", Handler);
    }

    private async Task RemoveMarker()
    {
        if (!markers.Any())
        {
            return;
        }

        var lastMarker = markers.Pop();
        await lastMarker.SetMap(null);
    }

    private async Task Recenter()
    {
        if (!markers.Any())
        {
            return;
        }

        var lastMarker = markers.Peek();
        var center = await map1.InteropObject.GetCenter();
        await lastMarker.SetPosition(center);
    }

}